package org.fosstrak.ale.wsdl.alecc.epcglobal;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;

import org.apache.log4j.Logger;
import org.fosstrak.ale.exception.CCSpecValidationException;
import org.fosstrak.ale.exception.DuplicateNameException;
import org.fosstrak.ale.exception.ImplementationException;
import org.fosstrak.ale.exception.NoSuchNameException;
import org.fosstrak.ale.server.cc.ALECC;
import org.fosstrak.ale.xsd.ale.epcglobal.AssocTableEntryList;
import org.fosstrak.ale.xsd.ale.epcglobal.AssocTableSpec;
import org.fosstrak.ale.xsd.ale.epcglobal.CCReports;
import org.fosstrak.ale.xsd.ale.epcglobal.CCSpec;
import org.fosstrak.ale.xsd.ale.epcglobal.EPCCacheSpec;
import org.fosstrak.ale.xsd.ale.epcglobal.EPCPatternList;
import org.fosstrak.ale.xsd.ale.epcglobal.RNGSpec;
import org.springframework.beans.factory.annotation.Autowired;

/**
 * This class was generated by Apache CXF (incubator) 2.0.4-incubator
 * Sun Mar 02 20:39:51 CET 2008
 * Generated source version: 2.0.4-incubator
 * 
 * @author Wondeuk Yoon
 */

public class ALECCServicePortTypeImpl implements ALECCServicePortType {

	private static final Logger log = Logger.getLogger(ALECCServicePortTypeImpl.class.getName());
	
    @Autowired
    private ALECC alecc;
    
	@Override
	@WebResult(name = "DefineResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "defineReturn")
	@WebMethod
	public DefineResult define(
			@WebParam(partName = "parms", name = "Define", targetNamespace = "urn:epcglobal:alecc:wsdl:1") Define arg0)
			throws SecurityExceptionResponse, DuplicateNameExceptionResponse,
			CCSpecValidationExceptionResponse, ImplementationExceptionResponse {
		log.debug("define");
		try {
			alecc.define(arg0.getSpecName(), arg0.getSpec());
		} catch (Exception e) {
			log.error("caught exception during define:", e);
		}
		return new DefineResult();
	}

	@Override
	@WebResult(name = "DefineAssocTableResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "defineAssocTableReturn")
	@WebMethod
	public DefineAssocTableResult defineAssocTable(
			@WebParam(partName = "parms", name = "DefineAssocTable", targetNamespace = "urn:epcglobal:alecc:wsdl:1") DefineAssocTable arg0)
			throws SecurityExceptionResponse,
			AssocTableValidationExceptionResponse,
			DuplicateNameExceptionResponse,
			InvalidAssocTableEntryExceptionResponse,
			ImplementationExceptionResponse {
		throw new ImplementationExceptionResponse();
	}

	@Override
	@WebResult(name = "DefineEPCCacheResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "defineEPCCacheReturn")
	@WebMethod
	public DefineEPCCacheResult defineEPCCache(
			@WebParam(partName = "parms", name = "DefineEPCCache", targetNamespace = "urn:epcglobal:alecc:wsdl:1") DefineEPCCache arg0)
			throws SecurityExceptionResponse,
			EPCCacheSpecValidationExceptionResponse,
			DuplicateNameExceptionResponse, ImplementationExceptionResponse,
			InvalidPatternExceptionResponse {
		throw new ImplementationExceptionResponse();
	}

	@Override
	@WebResult(name = "DefineRNGResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "defineRNGReturn")
	@WebMethod
	public DefineRNGResult defineRNG(
			@WebParam(partName = "parms", name = "DefineRNG", targetNamespace = "urn:epcglobal:alecc:wsdl:1") DefineRNG arg0)
			throws RNGValidationExceptionResponse, SecurityExceptionResponse,
			DuplicateNameExceptionResponse, ImplementationExceptionResponse {
		throw new ImplementationExceptionResponse();
	}

	@Override
	@WebResult(name = "DepleteEPCCacheResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "depleteEPCCacheReturn")
	@WebMethod
	public EPCPatternList depleteEPCCache(
			@WebParam(partName = "parms", name = "DepleteEPCCache", targetNamespace = "urn:epcglobal:alecc:wsdl:1") DepleteEPCCache arg0)
			throws SecurityExceptionResponse, NoSuchNameExceptionResponse,
			ImplementationExceptionResponse {
		throw new ImplementationExceptionResponse();
	}

	@Override
	@WebResult(name = "GetAssocTableResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "getAssocTableReturn")
	@WebMethod
	public AssocTableSpec getAssocTable(
			@WebParam(partName = "parms", name = "GetAssocTable", targetNamespace = "urn:epcglobal:alecc:wsdl:1") GetAssocTable arg0)
			throws SecurityExceptionResponse, NoSuchNameExceptionResponse,
			ImplementationExceptionResponse {
		throw new ImplementationExceptionResponse();
	}

	@Override
	@WebResult(name = "GetAssocTableEntriesResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "getAssocTableEntriesReturn")
	@WebMethod
	public AssocTableEntryList getAssocTableEntries(
			@WebParam(partName = "parms", name = "GetAssocTableEntries", targetNamespace = "urn:epcglobal:alecc:wsdl:1") GetAssocTableEntries arg0)
			throws SecurityExceptionResponse, NoSuchNameExceptionResponse,
			ImplementationExceptionResponse, InvalidPatternExceptionResponse {
		throw new ImplementationExceptionResponse();
	}

	@Override
	@WebResult(name = "GetAssocTableNamesResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "getAssocTableNamesReturn")
	@WebMethod
	public ArrayOfString getAssocTableNames(
			@WebParam(partName = "parms", name = "GetAssocTableNames", targetNamespace = "urn:epcglobal:alecc:wsdl:1") EmptyParms arg0)
			throws SecurityExceptionResponse, ImplementationExceptionResponse {
		throw new ImplementationExceptionResponse();
	}

	@Override
	@WebResult(name = "GetAssocTableValueResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "getAssocTableValueReturn")
	@WebMethod
	public String getAssocTableValue(
			@WebParam(partName = "parms", name = "GetAssocTableValue", targetNamespace = "urn:epcglobal:alecc:wsdl:1") GetAssocTableValue arg0)
			throws SecurityExceptionResponse, InvalidEPCExceptionResponse,
			NoSuchNameExceptionResponse, ImplementationExceptionResponse {
		throw new ImplementationExceptionResponse();
	}

	@Override
	@WebResult(name = "GetCCSpecResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "getCCSpecReturn")
	@WebMethod
	public CCSpec getCCSpec(
			@WebParam(partName = "parms", name = "GetCCSpec", targetNamespace = "urn:epcglobal:alecc:wsdl:1") GetCCSpec arg0)
			throws SecurityExceptionResponse, NoSuchNameExceptionResponse,
			ImplementationExceptionResponse {
		log.debug("getCCSpec");
		try {
			return alecc.getCCSpec(arg0.getSpecName());
		} catch (NoSuchNameException e) {
			throw new NoSuchNameExceptionResponse(e.getMessage(), e);
		}
	}

	@Override
	@WebResult(name = "GetCCSpecNamesResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "getCCSpecNamesReturn")
	@WebMethod
	public ArrayOfString getCCSpecNames(
			@WebParam(partName = "parms", name = "GetCCSpecNames", targetNamespace = "urn:epcglobal:alecc:wsdl:1") EmptyParms arg0)
			throws SecurityExceptionResponse, ImplementationExceptionResponse {
		log.debug("getCCSpecNames");
		ArrayOfString aof = new ArrayOfString();
    	
    	for (String sub : alecc.getCCSpecNames()) {
    		aof.getString().add(sub);
    	}
    	return aof;
	}

	@Override
	@WebResult(name = "GetEPCCacheResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "getEPCCacheReturn")
	@WebMethod
	public EPCCacheSpec getEPCCache(
			@WebParam(partName = "parms", name = "GetEPCCache", targetNamespace = "urn:epcglobal:alecc:wsdl:1") GetEPCCache arg0)
			throws SecurityExceptionResponse, NoSuchNameExceptionResponse,
			ImplementationExceptionResponse {
		throw new ImplementationExceptionResponse();
	}

	@Override
	@WebResult(name = "GetEPCCacheContentsResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "getEPCCacheContentsReturn")
	@WebMethod
	public EPCPatternList getEPCCacheContents(
			@WebParam(partName = "parms", name = "GetEPCCacheContents", targetNamespace = "urn:epcglobal:alecc:wsdl:1") GetEPCCacheContents arg0)
			throws SecurityExceptionResponse, NoSuchNameExceptionResponse,
			ImplementationExceptionResponse {
		throw new ImplementationExceptionResponse();
	}

	@Override
	@WebResult(name = "GetEPCCacheNamesResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "getEPCCacheNamesReturn")
	@WebMethod
	public ArrayOfString getEPCCacheNames(
			@WebParam(partName = "parms", name = "GetEPCCacheNames", targetNamespace = "urn:epcglobal:alecc:wsdl:1") EmptyParms arg0)
			throws SecurityExceptionResponse, ImplementationExceptionResponse {
		throw new ImplementationExceptionResponse();
	}

	@Override
	@WebResult(name = "GetRNGResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "getRNGReturn")
	@WebMethod
	public RNGSpec getRNG(
			@WebParam(partName = "parms", name = "GetRNG", targetNamespace = "urn:epcglobal:alecc:wsdl:1") GetRNG arg0)
			throws SecurityExceptionResponse, NoSuchNameExceptionResponse,
			ImplementationExceptionResponse {
		throw new ImplementationExceptionResponse();
	}

	@Override
	@WebResult(name = "GetRNGNamesResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "getRNGNamesReturn")
	@WebMethod
	public ArrayOfString getRNGNames(
			@WebParam(partName = "parms", name = "GetRNGNames", targetNamespace = "urn:epcglobal:alecc:wsdl:1") EmptyParms arg0)
			throws SecurityExceptionResponse, ImplementationExceptionResponse {
		throw new ImplementationExceptionResponse();
	}

	@Override
	@WebResult(name = "GetStandardVersionResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "getStandardVersionReturn")
	@WebMethod
	public String getStandardVersion(
			@WebParam(partName = "parms", name = "GetStandardVersion", targetNamespace = "urn:epcglobal:alecc:wsdl:1") EmptyParms arg0)
			throws ImplementationExceptionResponse {
		log.debug("getStandardVersion");
		return alecc.getStandardVersion();
	}

	@Override
	@WebResult(name = "GetSubscribersResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "getSubscribersReturn")
	@WebMethod
	public ArrayOfString getSubscribers(
			@WebParam(partName = "parms", name = "GetSubscribers", targetNamespace = "urn:epcglobal:alecc:wsdl:1") GetSubscribers arg0)
			throws SecurityExceptionResponse, NoSuchNameExceptionResponse,
			ImplementationExceptionResponse {
		log.debug("getSubscribers");
		ArrayOfString aof = new ArrayOfString();
    	
    	try {
			for (String sub : alecc.getSubscribers(arg0.getSpecName())) {
				aof.getString().add(sub);
			}
		} catch (NoSuchNameException e) {
			throw new NoSuchNameExceptionResponse(e.getMessage(), e);
		}
    	return aof;
	}

	@Override
	@WebResult(name = "GetVendorVersionResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "getVendorVersionReturn")
	@WebMethod
	public String getVendorVersion(
			@WebParam(partName = "parms", name = "GetVendorVersion", targetNamespace = "urn:epcglobal:alecc:wsdl:1") EmptyParms arg0)
			throws ImplementationExceptionResponse {
		log.debug("getVendorVersion");
		return alecc.getVendorVersion();
	}

	@Override
	@WebResult(name = "ImmediateResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "immediateReturn")
	@WebMethod
	public CCReports immediate(
			@WebParam(partName = "parms", name = "Immediate", targetNamespace = "urn:epcglobal:alecc:wsdl:1") Immediate arg0)
			throws SecurityExceptionResponse,
			CCSpecValidationExceptionResponse, ImplementationExceptionResponse,
			ParameterForbiddenExceptionResponse {
		log.debug("immediate");
		try {
			return alecc.immediate(arg0.getSpec());
		} catch (CCSpecValidationException e) {
			throw new CCSpecValidationExceptionResponse(e.getMessage(), e);
		} catch (ImplementationException e) {
			throw new ImplementationExceptionResponse(e.getMessage(), e);
		}
	}

	@Override
	@WebResult(name = "PollResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "pollReturn")
	@WebMethod
	public CCReports poll(
			@WebParam(partName = "parms", name = "Poll", targetNamespace = "urn:epcglobal:alecc:wsdl:1") Poll arg0)
			throws SecurityExceptionResponse, ParameterExceptionResponse,
			NoSuchNameExceptionResponse, ImplementationExceptionResponse {
		log.debug("poll");
    	try {
			return alecc.poll(arg0.getSpecName());
		} catch (org.fosstrak.ale.exception.NoSuchNameException e) {
			throw new NoSuchNameExceptionResponse(e.getMessage(), e);
		}
	}

	@Override
	@WebResult(name = "PutAssocTableEntriesResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "putAssocTableEntriesReturn")
	@WebMethod
	public PutAssocTableEntriesResult putAssocTableEntries(
			@WebParam(partName = "parms", name = "PutAssocTableEntries", targetNamespace = "urn:epcglobal:alecc:wsdl:1") PutAssocTableEntries arg0)
			throws SecurityExceptionResponse,
			InvalidAssocTableEntryExceptionResponse,
			NoSuchNameExceptionResponse, ImplementationExceptionResponse {
		throw new ImplementationExceptionResponse();
	}

	@Override
	@WebResult(name = "RemoveAssocTableEntriesResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "removeAssocTableEntriesReturn")
	@WebMethod
	public RemoveAssocTableEntriesResult removeAssocTableEntries(
			@WebParam(partName = "parms", name = "RemoveAssocTableEntries", targetNamespace = "urn:epcglobal:alecc:wsdl:1") RemoveAssocTableEntries arg0)
			throws SecurityExceptionResponse, NoSuchNameExceptionResponse,
			ImplementationExceptionResponse, InvalidPatternExceptionResponse {
		throw new ImplementationExceptionResponse();
	}

	@Override
	@WebResult(name = "RemoveAssocTableEntryResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "removeAssocTableEntryReturn")
	@WebMethod
	public RemoveAssocTableEntryResult removeAssocTableEntry(
			@WebParam(partName = "parms", name = "RemoveAssocTableEntry", targetNamespace = "urn:epcglobal:alecc:wsdl:1") RemoveAssocTableEntry arg0)
			throws SecurityExceptionResponse, InvalidEPCExceptionResponse,
			NoSuchNameExceptionResponse, ImplementationExceptionResponse {
		throw new ImplementationExceptionResponse();
	}

	@Override
	@WebResult(name = "ReplenishEPCCacheResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "replenishEPCCacheReturn")
	@WebMethod
	public ReplenishEPCCacheResult replenishEPCCache(
			@WebParam(partName = "parms", name = "ReplenishEPCCache", targetNamespace = "urn:epcglobal:alecc:wsdl:1") ReplenishEPCCache arg0)
			throws SecurityExceptionResponse, NoSuchNameExceptionResponse,
			ImplementationExceptionResponse, InvalidPatternExceptionResponse {
		throw new ImplementationExceptionResponse();
	}

	@Override
	@WebResult(name = "SubscribeResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "subscribeReturn")
	@WebMethod
	public SubscribeResult subscribe(
			@WebParam(partName = "parms", name = "Subscribe", targetNamespace = "urn:epcglobal:alecc:wsdl:1") Subscribe arg0)
			throws SecurityExceptionResponse, InvalidURIExceptionResponse,
			DuplicateSubscriptionExceptionResponse,
			NoSuchNameExceptionResponse, ImplementationExceptionResponse,
			ParameterForbiddenExceptionResponse {
		log.debug("subscribe");
    	try {
			alecc.subscribe(arg0.getSpecName(), arg0.getNotificationURI());
		} catch (org.fosstrak.ale.exception.NoSuchNameException e) {
			throw new NoSuchNameExceptionResponse(e.getMessage(), e);
		} catch (org.fosstrak.ale.exception.InvalidURIException e) {
			throw new InvalidURIExceptionResponse(e.getMessage(), e);
		} catch (org.fosstrak.ale.exception.DuplicateSubscriptionException e) {
			throw new DuplicateSubscriptionExceptionResponse(e.getMessage(), e);
		}
    	return new SubscribeResult();
	}

	@Override
	@WebResult(name = "UndefineResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "undefineReturn")
	@WebMethod
	public UndefineResult undefine(
			@WebParam(partName = "parms", name = "Undefine", targetNamespace = "urn:epcglobal:alecc:wsdl:1") Undefine arg0)
			throws SecurityExceptionResponse, NoSuchNameExceptionResponse,
			ImplementationExceptionResponse {
		log.debug("undefine");
    	try {
			alecc.undefine(arg0.getSpecName());
		} catch (org.fosstrak.ale.exception.NoSuchNameException e) {
			throw new NoSuchNameExceptionResponse(e.getMessage(), e);
		}
    	return new UndefineResult();
	}

	@Override
	@WebResult(name = "UndefineAssocTableResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "undefineAssocTableReturn")
	@WebMethod
	public UndefineAssocTableResult undefineAssocTable(
			@WebParam(partName = "parms", name = "UndefineAssocTable", targetNamespace = "urn:epcglobal:alecc:wsdl:1") UndefineAssocTable arg0)
			throws SecurityExceptionResponse, InUseExceptionResponse,
			NoSuchNameExceptionResponse, ImplementationExceptionResponse {
		throw new ImplementationExceptionResponse();
	}

	@Override
	@WebResult(name = "UndefineEPCCacheResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "undefineEPCCacheReturn")
	@WebMethod
	public EPCPatternList undefineEPCCache(
			@WebParam(partName = "parms", name = "UndefineEPCCache", targetNamespace = "urn:epcglobal:alecc:wsdl:1") UndefineEPCCache arg0)
			throws SecurityExceptionResponse, InUseExceptionResponse,
			NoSuchNameExceptionResponse, ImplementationExceptionResponse {
		throw new ImplementationExceptionResponse();
	}

	@Override
	@WebResult(name = "UndefineRNGResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "undefineRNGReturn")
	@WebMethod
	public UndefineRNGResult undefineRNG(
			@WebParam(partName = "parms", name = "UndefineRNG", targetNamespace = "urn:epcglobal:alecc:wsdl:1") UndefineRNG arg0)
			throws SecurityExceptionResponse, InUseExceptionResponse,
			NoSuchNameExceptionResponse, ImplementationExceptionResponse {
		throw new ImplementationExceptionResponse();
	}

	@Override
	@WebResult(name = "UnsubscribeResult", targetNamespace = "urn:epcglobal:alecc:wsdl:1", partName = "unsubscribeReturn")
	@WebMethod
	public UnsubscribeResult unsubscribe(
			@WebParam(partName = "parms", name = "Unsubscribe", targetNamespace = "urn:epcglobal:alecc:wsdl:1") Unsubscribe arg0)
			throws SecurityExceptionResponse, InvalidURIExceptionResponse,
			NoSuchSubscriberExceptionResponse, NoSuchNameExceptionResponse,
			ImplementationExceptionResponse {
		log.debug("unsubscribe");
    	try {
			alecc.unsubscribe(arg0.getSpecName(), arg0.getNotificationURI());
		} catch (org.fosstrak.ale.exception.NoSuchNameException e) {
			throw new NoSuchNameExceptionResponse(e.getMessage(), e);
		} catch (org.fosstrak.ale.exception.NoSuchSubscriberException e) {
			throw new NoSuchSubscriberExceptionResponse(e.getMessage(), e);
		} catch (org.fosstrak.ale.exception.InvalidURIException e) {
			throw new InvalidURIExceptionResponse(e.getMessage(), e);
		}
    	return new UnsubscribeResult();
	}

}
